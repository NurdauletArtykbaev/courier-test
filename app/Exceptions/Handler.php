<?php

namespace App\Exceptions;

use Illuminate\Auth\AuthenticationException;
use Illuminate\Database\QueryException;
use Illuminate\Foundation\Exceptions\Handler as ExceptionHandler;
use Illuminate\Http\Response;
use Illuminate\Support\Str;
use Illuminate\Validation\ValidationException;
use Symfony\Component\HttpKernel\Exception\MethodNotAllowedHttpException;
use Throwable;

class Handler extends ExceptionHandler
{
    /**
     * The list of the inputs that are never flashed to the session on validation exceptions.
     *
     * @var array<int, string>
     */
    protected $dontFlash = [
        'current_password',
        'password',
        'password_confirmation',
    ];

    /**
     * Register the exception handling callbacks for the application.
     */
    public function register(): void
    {
        $this->reportable(function (Throwable $e) {
            //
        });
    }

    /**
     * Register the exception handling callbacks for the application.
     */
    public function render($request, Throwable $e)
    {
        if (Str::startsWith($request->getRequestUri(), ['/api', 'api'])) {

            [$data, $code] = $this->prepareResponseData($e);
            return response()->json($data, $code);
        }
        return parent::render($request, $e); // TODO: Change the autogenerated stub
    }

    private function prepareResponseData($e)
    {

        $code = $this->getCode($e);
        $errors = [];
        if (method_exists($e, 'errors')) {
            $errors = $e->errors();
        }
        return [[
            'data' => [
                'message' => $e->getMessage(),
                'errors' => $errors,
            ]], $code];

    }

    private function getCode($e)
    {
        if (method_exists($e, 'getStatusCode')) {
            $code = $e->getStatusCode();
        } else {
            if ($e instanceof ValidationException) {
                $code = Response::HTTP_UNPROCESSABLE_ENTITY;
            } else if ($e instanceof MethodNotAllowedHttpException) {
                $code = Response::HTTP_NOT_FOUND;
            } else if ($e instanceof QueryException) {
                $code = Response::HTTP_INTERNAL_SERVER_ERROR;
            } else if ($e instanceof AuthenticationException) {
                $code = Response::HTTP_UNAUTHORIZED;
            } else {
                $code = $e->getCode();
            }
        }
//        dd(get_class($e));
        return $code;
    }
}
